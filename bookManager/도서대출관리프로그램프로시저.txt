--1. 시퀀스 삭제 및 생성
DROP SEQUENCE SC_BK_IDX;
DROP SEQUENCE SC_RM_IDX;
DROP SEQUENCE SC_RB_IDX;
DROP SEQUENCE SC_RH_IDX;
DROP SEQUENCE SC_BOARD_IDX;
DROP SEQUENCE SC_FILE_IDX;
DROP SEQUENCE SC_BC_IDX;

create sequence SC_BK_IDX
START WITH 100000;
create sequence SC_RM_IDX
START WITH 100000;
create sequence SC_RB_IDX
START WITH 100000;
create sequence SC_RH_IDX
START WITH 100000;
create sequence SC_BOARD_IDX
START WITH 100000;
CREATE SEQUENCE SC_FILE_IDX
START WITH 100000;
CREATE SEQUENCE SC_BC_IDX
START WITH 100000;

--2. 회원더미데이터 입력
INSERT INTO MEMBER VALUES('DEV','123ABC!@3','aaa@aaa.com','ME00','010-0000-0000',SYSDATE, sysdate, 0);
COMMIT;

--3. 도서 더미데이터 입력
INSERT INTO book
(BK_IDX,category,title,author,REG_DATE,BOOK_AMT,RENT_CNT)
VALUES(sc_BK_IDX.NEXTVAL,'BC00','비행운','김애란',SYSDATE,1,0);

INSERT INTO book
(BK_IDX,category,title,author,REG_DATE,BOOK_AMT,RENT_CNT)
VALUES(sc_BK_IDX.NEXTVAL,'BC00','남한산성','김훈',SYSDATE,1,0);

INSERT INTO book
(BK_IDX,category,title,author,REG_DATE,BOOK_AMT,RENT_CNT)
VALUES(sc_BK_IDX.NEXTVAL,'BC00','사랑의기술','에리히프롬',SYSDATE,1,0);

INSERT INTO book
(BK_IDX,category,title,author,REG_DATE,BOOK_AMT,RENT_CNT)
VALUES(sc_BK_IDX.NEXTVAL,'BC00','달콤한나의도시','정이현',SYSDATE,1,0);
COMMIT;

--BK_IDXS 테이블 타입 생성
--CREATE OR REPLACE TYPE BK_IDXS IS TABLE OF VARCHAR2(36 CHAR);

--4.대출정보입력 PROCEDURE 생성
CREATE OR REPLACE PROCEDURE SP_RENT_INSERT
( V_USER_ID MEMBER.USER_ID%TYPE
 ,V_TITLE RENT_MASTER.TITLE%TYPE
 ,V_RENT_BOOK_CNT RENT_MASTER.RENT_BOOK_CNT%TYPE
 ,V_BK_IDXS BK_IDXS )
IS
BEGIN
    -- A. RENT_MASTER 테이블에 대출건 정보를 입력
    -- 필요한 컬럼값 : RM_IDX(시퀀스), USER_ID, TITLE, RENT_BOOK_CNT                 
    -- 매개변수 : USER_ID, TITLE, RENT_BOOK_CNT
    INSERT INTO RENT_MASTER(RM_IDX, USER_ID, TITLE, RENT_BOOK_CNT)
           VALUES(SC_RM_IDX.NEXTVAL,V_USER_ID,V_TITLE,V_RENT_BOOK_CNT);
         
    FOR I IN 1..V_RENT_BOOK_CNT
    LOOP
    -- B. RENT_BOOK 테이블에 대출도서 정보를 입력
    -- 필요한 컬럼값 : RB_IDX(시퀀스), RM_IDX(시퀀스.CURRVAL), BK_IDX
    -- 매개변수 : V_BK_IDXS(테이블 타입)
    INSERT INTO RENT_BOOK(RB_IDX, RM_IDX, BK_IDX)
    VALUES(SC_RB_IDX.NEXTVAL, SC_RM_IDX.CURRVAL, V_BK_IDXS(I));
    
    -- C. 도서 테이블에서 대출된 도서의 재고를 차감하고 대출횟수를 증가
    UPDATE BOOK
    SET BOOK_AMT = BOOK_AMT - 1
    , RENT_CNT = RENT_CNT + 1
    WHERE BK_IDX = V_BK_IDXS(I);
    
    -- D. 대출 히스토리 테이블에 대출상태값들을 입력
    --컬럼값 : RH_IDX, RM_IDX, RB_IDX, BK_IDX, REG_DATE, STATE
    INSERT INTO RENT_HISTORY 
    VALUES(SC_RH_IDX.NEXTVAL, SC_RM_IDX.CURRVAL
         , SC_RB_IDX.CURRVAL, V_BK_IDXS(I), SYSDATE, 'RE00'); 
    END LOOP;
END;
/

--프로시저 테스트
DECLARE
    V_BK_IDXS BK_IDXS;
BEGIN
    V_BK_IDXS := BK_IDXS('100000','100001','100002');
    SP_RENT_INSERT('DEV','비행운 외 2권', 3, V_BK_IDXS);
    COMMIT;
END;
/

--DEV 사용자의 대출건 제목과 대출도서들의 도서명과 작가를 조회
SELECT USER_ID, RM.TITLE, B.TITLE, AUTHOR
FROM MEMBER
JOIN RENT_MASTER RM USING(USER_ID)
JOIN RENT_BOOK RB USING(RM_IDX)
JOIN BOOK B USING(BK_IDX)
WHERE USER_ID = 'DEV';

--5. 대출 연장 프로시저 생성
-- 프로시저명 : SP_RENT_EXTEND
-- 대출도서번호(RB_IDX)를 입력받아 해당 대출도서의 대출 상태를 RE01('연장')로 변경해주는 프로시저
CREATE OR REPLACE PROCEDURE SP_RENT_EXTEND
(V_RB_IDX RENT_BOOK.RB_IDX%TYPE)
IS
R RENT_BOOK%ROWTYPE;
BEGIN
-- A. 해당 대출도서의 대출상태를 RE01로 변경
--    대출도서의 반납일정을 7일 추가
--    대출도서의 연장횟수 1 증가
UPDATE RENT_BOOK
SET STATE = 'RE01'
,RETURN_DATE = RETURN_DATE + 7
,extension_cnt = extension_cnt + 1
WHERE RB_IDX = V_RB_IDX;

-- B. RENT_HISTORY  테이블에 대출 상태 변경 내역을 추가(INSERT)
SELECT * INTO R
FROM RENT_BOOK
WHERE RB_IDX = V_RB_IDX;

INSERT INTO RENT_HISTORY
VALUES(SC_RH_IDX.NEXTVAL, R.RM_IDX, R.RB_IDX, R.BK_IDX, SYSDATE, 'RE01');
END;
/

-- sp_rent_extend 테스트
EXEC sp_rent_extend('100002');

--6. 대출반납처리 프로시저
--프로시저명 : SP_RENT_RETURN
create or replace PROCEDURE sp_rent_return(
    V_RB_IDX RENT_BOOK.RB_IDX%TYPE)
is
V_BK_IDX BOOK.BK_IDX%TYPE;
V_USER_ID MEMBER.USER_ID%TYPE;
V_RM_IDX RENT_MASTER.RM_IDX%TYPE;
V_RETURN_DATE RENT_BOOK.RETURN_DATE%TYPE;
V_DELAY_DATE NUMBER;
V_STATE_RENT_CNT NUMBER;
begin 
    SELECT BK_IDX,USER_ID,RM_IDX,RETURN_DATE
    INTO V_BK_IDX,V_USER_ID,V_RM_IDX,V_RETURN_DATE
    FROM RENT_BOOK RB
    JOIN RENT_MASTER RM USING(RM_IDX)
    WHERE RB.RB_IDX = V_RB_IDX;
    
-- A. 대출도서가 참조하고 있는 도서의 재고가 1권 증가
    UPDATE BOOK
    SET BOOK_AMT = BOOK_AMT + 1
    WHERE BK_IDX = V_BK_IDX;

-- B. 만약 오늘 날짜가 반납예정일자(RETURN_DATE) 이후 라면
--    해당 회원의 RENTABLE_DATE를 오늘 날짜 + 연체일수 * 4 로 변경해준다.
    V_DELAY_DATE := TRUNC(SYSDATE)-TRUNC(V_RETURN_DATE); --연체일자
    IF(V_DELAY_DATE > 0)
        THEN
            UPDATE MEMBER
            SET RENTABLE_DATE = TRUNC(SYSDATE) + (V_DELAY_DATE) * 4
            WHERE USER_ID = V_USER_ID;
    END IF;

-- C. 대출도서의 상태를 반납('RE03')으로 변경
--    반납예정일을 현재 시간으로 변경. (상태가 반납인 경우, 반납예정일이 반납된 시간을 의미)
    UPDATE RENT_BOOK
    SET STATE = 'RE03'
    ,RETURN_DATE = SYSDATE
    WHERE RB_IDX = V_RB_IDX;

-- D. 대출도서가 포함된 대출건의 모든 대출도서가 반납 상태인지 확인
--    만약 대출건의 모든 대출도서가 반납상태라면, 해당 대출건을 완납처리(RENT_MASTER.IS_RETURN 값을 1로 변경) 한다.
    --현재 상태가 반납상태가 아닌 도서의 권수를 체크
    SELECT COUNT(*)
    INTO V_STATE_RENT_CNT
    FROM RENT_BOOK
    WHERE RM_IDX = V_RM_IDX
    AND STATE != 'RE03';
    
    IF(V_STATE_RENT_CNT = 0)
        THEN UPDATE RENT_MASTER
             SET IS_RETURN = 1
             WHERE RM_IDX = V_RM_IDX;
    END IF;


-- E. 대출 히스토리 테이블에 반납내역을 추가
    INSERT INTO RENT_HISTORY
    VALUES(SC_RH_IDX.NEXTVAL, V_RM_IDX, V_RB_IDX, V_BK_IDX, SYSDATE, 'RE03');
end;
/

--SP_RENT_RETURN 테스트
EXEC SP_RENT_RETURN('100002');
EXEC SP_RENT_RETURN('100000');

--SP_RENT_RETURN 테스트(연체)
UPDATE RENT_BOOK
SET RETURN_DATE = SYSDATE - 1
WHERE RB_IDX = '100001';

EXEC SP_RENT_RETURN('100001');
COMMIT;

